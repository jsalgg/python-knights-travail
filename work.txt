-[x] Create a file named tree.py.
-[x] Declare a class named Node.
-[x] Create an initializer for Node that Accepts
     a parameter named "value"
     and sets an instance variable named "_value" to that value
-[x] Sets the "_parent" instance variable to None
-[x] Sets the "_children" instance variable to a new empty list
__ Add the following to the class
    -[x] A getter property method named "value" that returns the value in "_value"
    -[x] A getter property method named "children" that returns the value of "_children"
    -[x] A method named "add_child" that takes a node to append it to the list in "_children"
        and update the node's "_parent", if the node is not already in "_children"
    -[x] A method named "remove_child" that takes a node to remove it from the list in "_children"
        and reset its "_parent" to None
    -[x] A getter property method named "parent" that returns the value of "_parent"
    -[x] A setter property method named "parent" that sets the parent property
        and calls the "add_child" method of the parent node passing itself
            as the node to add to the list of children


Phase 2: KnightPathFinder class

The knight's starting position = root node of the tree, the one passed in through the initializer.

-[x] use  Node class to represent each position

-[x] Creating an instance variable, self._root that stores the knight's initial position in an instance of your Node class.

-[] keep track of all of the positions that the tree has already seen,
    since you don't want to end up in an infinite loop of bouncing back and forth between the same two positions.
-[] Add a new instance variable to the initializer named _considered_positions
    and initialize it to a new set with the knight's root start position.


Phase 2a: Valid and new move positions

-[] Write a method named get_valid_moves(pos).
        instance methods need to take in self as the first parameter.
        From the value in pos, there could be up to eight possible moves.
-[] The get_valid_moves(pos) method returns all valid moves from the position passed to it.

-[] Write a method named new_move_positions(pos). From the value in pos, use it to call get_valid_moves(pos).
Filter out the values returned from get_valid_moves(pos) with the values in _considered_positions.
Think of what built-in set method you could use.
Whatever is left over, add those values to _considered_positions, then return them.

When you have completed both methods, take a moment to test your new_move_positions(pos) method. Initialize an instance of the KnightPathFinder class and invoke the new_move_positions method with a position. You should receive a set of possible moves (valid positions that are not already in the instance's "_considered_positions".)


|       |       |       |       |       |       |       |       |
_________________________________________________________________
|       |       |   line17   |       |   line14   |       |       |       |
_________________________________________________________________
|       |       |       |   ⬆️   |       |       |       |       |
_________________________________________________________________
|       |       |       |   ♘   |       |       |       |       |
_________________________________________________________________
|       |       |       |       |       |       |       |       |
_________________________________________________________________
|       |       |       |       |       |       |       |       |
_________________________________________________________________
|       |       |       |       |       |       |       |       |
_________________________________________________________________
|       |       |       |       |       |       |       |       |
_________________________________________________________________
|       |       |       |       |       |       |       |       |


-[] define a set of moves from new_move_positions(self._root.value)
-[] define 
-[] iterate over set of moves and create nodes for each
    //while iterating add to queue
    -[] add child nodes to a queue
-[] iterative process
    -[] popping node off queue and define var with that value
    -[] 

queue = Queue
root = self._root
queue.enque(root)
while queue:
    curr_node = queue.dequeue
    new_moves = new_move_positions(curr_node)
    for x in new_moves:
        child = Node(x)
        curr_node.add_child(child)
        queue.enqueue(child)
//////
path = [] 
while Node.parent is not None:
    path.append(Node.value)
    Node = Node.parent
////////

-[] target_node = self._depth_search(end_pos)
-[] trace_to_root(target_node) => list of nodes
-[] map values from node list and return it // -[] return list of positions from [root, ... , end_pos]
